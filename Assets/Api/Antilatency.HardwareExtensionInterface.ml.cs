//Generated by AntilatencyApiGenerator
#pragma warning disable IDE1006 // Do not warn about naming style violations
using Csml;
using static ApiStatic;
public sealed partial class Api : Scope {
	public sealed partial class Antilatency : Scope {
		public sealed partial class HardwareExtensionInterface : Scope {
			public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"HardwareExtensionInterface").AddClasses("Namespace");
			public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
			public static IElement _FullNameRef => new Text($"{Antilatency._FullNameRef}.{_NameRef}");
			public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
			public static Material Material => new Material("Antilatency.HardwareExtensionInterface",null,$"Namespace in `{Api.Antilatency._FullNameRef}`")
				[new Section("Types")
					[new UnorderedList()
						[$"*constant group* {Constants.NameRefCode}"]
						[$"*interface* {IInputPin.NameRefCode}"]
						[$"*interface* {IOutputPin.NameRefCode}"]
						[$"*interface* {IAnalogPin.NameRefCode}"]
						[$"*interface* {IPulseCounterPin.NameRefCode}"]
						[$"*interface* {IPwmPin.NameRefCode}"]
						[$"*interface* {ICotaskConstructor.NameRefCode}"]
						[$"*interface* {ICotask.NameRefCode}"]
						[$"*interface* {ILibrary.NameRefCode}"]
					]
				]
				[new Section("Nested Namespaces")
					[new UnorderedList()
						[Api.Antilatency.HardwareExtensionInterface.Interop.NameRefCode]
					]
				]
				;
			public sealed partial class Constants : Scope {
				public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"Constants").AddClasses("Type");
				public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
				public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
				public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
				public static Material Material => new Material("Antilatency.HardwareExtensionInterface.Constants",null,$"Constants in `{Api.Antilatency.HardwareExtensionInterface._FullNameRef}`")[CodeBlock];
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static IElement RawDeclarationCode => new Text($"{Fields.AnalogMinRefreshIntervalMs.RawDeclarationCode}\n{Fields.AnalogMaxRefreshIntervalMs.RawDeclarationCode}\n{Fields.PulseCounterMinRefreshIntervalMs.RawDeclarationCode}\n{Fields.PulseCounterMaxRefreshIntervalMs.RawDeclarationCode}\n{Fields.PwmMinFrequency.RawDeclarationCode}\n{Fields.PwmMaxFrequency.RawDeclarationCode}");
				public sealed partial class Fields : Scope {
					public sealed partial class AnalogMinRefreshIntervalMs : Scope {
						public static IElement _Name => new Modify($"AnalogMinRefreshIntervalMs").AddClasses("Constant").Attribute("title", "1");
						public static IElement NameCode => _Name.Modify().Wrap("code");
						public static System.UInt32 Value => 1;
						public static IElement RawDeclarationCode => new Text($"{Keyword("uint")} {_Name} = {_Value}");
						public static IElement _Value => new Text($"1");
					} //scope AnalogMinRefreshIntervalMs
					public sealed partial class AnalogMaxRefreshIntervalMs : Scope {
						public static IElement _Name => new Modify($"AnalogMaxRefreshIntervalMs").AddClasses("Constant").Attribute("title", "65535 (0xFFFF)");
						public static IElement NameCode => _Name.Modify().Wrap("code");
						public static System.UInt32 Value => 65535;
						public static IElement RawDeclarationCode => new Text($"{Keyword("uint")} {_Name} = {_Value}");
						public static IElement _Value => new Text($"65535 (0xFFFF)");
					} //scope AnalogMaxRefreshIntervalMs
					public sealed partial class PulseCounterMinRefreshIntervalMs : Scope {
						public static IElement _Name => new Modify($"PulseCounterMinRefreshIntervalMs").AddClasses("Constant").Attribute("title", "1");
						public static IElement NameCode => _Name.Modify().Wrap("code");
						public static System.UInt32 Value => 1;
						public static IElement RawDeclarationCode => new Text($"{Keyword("uint")} {_Name} = {_Value}");
						public static IElement _Value => new Text($"1");
					} //scope PulseCounterMinRefreshIntervalMs
					public sealed partial class PulseCounterMaxRefreshIntervalMs : Scope {
						public static IElement _Name => new Modify($"PulseCounterMaxRefreshIntervalMs").AddClasses("Constant").Attribute("title", "125 (0x7D)");
						public static IElement NameCode => _Name.Modify().Wrap("code");
						public static System.UInt32 Value => 125;
						public static IElement RawDeclarationCode => new Text($"{Keyword("uint")} {_Name} = {_Value}");
						public static IElement _Value => new Text($"125 (0x7D)");
					} //scope PulseCounterMaxRefreshIntervalMs
					public sealed partial class PwmMinFrequency : Scope {
						public static IElement _Name => new Modify($"PwmMinFrequency").AddClasses("Constant").Attribute("title", "20 (0x14)");
						public static IElement NameCode => _Name.Modify().Wrap("code");
						public static System.UInt32 Value => 20;
						public static IElement RawDeclarationCode => new Text($"{Keyword("uint")} {_Name} = {_Value}");
						public static IElement _Value => new Text($"20 (0x14)");
					} //scope PwmMinFrequency
					public sealed partial class PwmMaxFrequency : Scope {
						public static IElement _Name => new Modify($"PwmMaxFrequency").AddClasses("Constant").Attribute("title", "10000 (0x2710)");
						public static IElement NameCode => _Name.Modify().Wrap("code");
						public static System.UInt32 Value => 10000;
						public static IElement RawDeclarationCode => new Text($"{Keyword("uint")} {_Name} = {_Value}");
						public static IElement _Value => new Text($"10000 (0x2710)");
					} //scope PwmMaxFrequency
				} //scope Fields
			} //scope Constants
			
			public sealed partial class IInputPin : Scope {
				public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"IInputPin").AddClasses("Type");
				public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
				public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
				public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
				public static IElement RawDeclarationCode => new Text($"{Interface} {_NameRef} : {Namespace("InterfaceContract")}.{Type("IInterface")} {{\n    {Methods.getState.RawDeclarationCode};\n}}");
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static Material Material => new Material("Antilatency.HardwareExtensionInterface.IInputPin",null,$"Interface in `{Api.Antilatency.HardwareExtensionInterface._FullNameRef}`")[CodeBlock];
				public sealed partial class Methods : Scope {
					/// <summary>Read latest state.</summary>
					public sealed partial class getState : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getState").AddClasses("Method");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{IInputPin._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.Interop._NameRef.Modify().ContentReplace($"Interop")}.{Api.Antilatency.HardwareExtensionInterface.Interop.PinState._NameRef} {_NameRef}()");
						public static Material Material => new Material("Antilatency.HardwareExtensionInterface.IInputPin.getState",null,$"Method of `{Api.Antilatency.HardwareExtensionInterface.IInputPin._NameRef}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope getState
				} //scope Methods
			} //scope IInputPin
			
			public sealed partial class IOutputPin : Scope {
				public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"IOutputPin").AddClasses("Type");
				public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
				public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
				public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
				public static IElement RawDeclarationCode => new Text($"{Interface} {_NameRef} : {Namespace("InterfaceContract")}.{Type("IInterface")} {{\n    {Methods.setState.RawDeclarationCode};\n    {Methods.getState.RawDeclarationCode};\n}}");
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static Material Material => new Material("Antilatency.HardwareExtensionInterface.IOutputPin",null,$"Interface in `{Api.Antilatency.HardwareExtensionInterface._FullNameRef}`")[CodeBlock];
				public sealed partial class Methods : Scope {
					/// <summary>Set logic level on pin.</summary>
					public sealed partial class setState : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"setState").AddClasses("Method");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{IOutputPin._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {_NameRef}({Parameters.state.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency.HardwareExtensionInterface.IOutputPin.setState",null,$"Method of `{Api.Antilatency.HardwareExtensionInterface.IOutputPin._NameRef}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class state : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.Interop._NameRef.Modify().ContentReplace($"Interop")}.{Api.Antilatency.HardwareExtensionInterface.Interop.PinState._NameRef} {_Name}");
								public static IElement _Name => new Modify($"state").Attribute("title", "parameter state");
								public static IElement NameCode => _Name.Modify().Wrap("code");
							} //scope state
						} //scope Parameters
					} //scope setState
					/// <summary>Read latest state(cashed).</summary>
					public sealed partial class getState : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getState").AddClasses("Method");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{IOutputPin._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.Interop._NameRef.Modify().ContentReplace($"Interop")}.{Api.Antilatency.HardwareExtensionInterface.Interop.PinState._NameRef} {_NameRef}()");
						public static Material Material => new Material("Antilatency.HardwareExtensionInterface.IOutputPin.getState",null,$"Method of `{Api.Antilatency.HardwareExtensionInterface.IOutputPin._NameRef}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope getState
				} //scope Methods
			} //scope IOutputPin
			
			public sealed partial class IAnalogPin : Scope {
				public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"IAnalogPin").AddClasses("Type");
				public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
				public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
				public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
				public static IElement RawDeclarationCode => new Text($"{Interface} {_NameRef} : {Namespace("InterfaceContract")}.{Type("IInterface")} {{\n    {Methods.getValue.RawDeclarationCode};\n}}");
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static Material Material => new Material("Antilatency.HardwareExtensionInterface.IAnalogPin",null,$"Interface in `{Api.Antilatency.HardwareExtensionInterface._FullNameRef}`")[CodeBlock];
				public sealed partial class Methods : Scope {
					/// <summary>Read latest voltage.</summary>
					/// <returns>Voltage in volts.</returns>
					public sealed partial class getValue : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getValue").AddClasses("Method");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{IAnalogPin._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("float")} {_NameRef}()");
						public static Material Material => new Material("Antilatency.HardwareExtensionInterface.IAnalogPin.getValue",null,$"Method of `{Api.Antilatency.HardwareExtensionInterface.IAnalogPin._NameRef}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope getValue
				} //scope Methods
			} //scope IAnalogPin
			
			public sealed partial class IPulseCounterPin : Scope {
				public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"IPulseCounterPin").AddClasses("Type");
				public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
				public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
				public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
				public static IElement RawDeclarationCode => new Text($"{Interface} {_NameRef} : {Namespace("InterfaceContract")}.{Type("IInterface")} {{\n    {Methods.getValue.RawDeclarationCode};\n}}");
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static Material Material => new Material("Antilatency.HardwareExtensionInterface.IPulseCounterPin",null,$"Interface in `{Api.Antilatency.HardwareExtensionInterface._FullNameRef}`")[CodeBlock];
				public sealed partial class Methods : Scope {
					/// <summary>Read latest count of rising edges.</summary>
					public sealed partial class getValue : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getValue").AddClasses("Method");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{IPulseCounterPin._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("ushort")} {_NameRef}()");
						public static Material Material => new Material("Antilatency.HardwareExtensionInterface.IPulseCounterPin.getValue",null,$"Method of `{Api.Antilatency.HardwareExtensionInterface.IPulseCounterPin._NameRef}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope getValue
				} //scope Methods
			} //scope IPulseCounterPin
			
			public sealed partial class IPwmPin : Scope {
				public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"IPwmPin").AddClasses("Type");
				public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
				public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
				public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
				public static IElement RawDeclarationCode => new Text($"{Interface} {_NameRef} : {Namespace("InterfaceContract")}.{Type("IInterface")} {{\n    {Methods.setDuty.RawDeclarationCode};\n    {Methods.getDuty.RawDeclarationCode};\n    {Methods.getFrequency.RawDeclarationCode};\n}}");
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static Material Material => new Material("Antilatency.HardwareExtensionInterface.IPwmPin",null,$"Interface in `{Api.Antilatency.HardwareExtensionInterface._FullNameRef}`")[CodeBlock];
				public sealed partial class Methods : Scope {
					/// <summary>Set pwm duty.</summary>
					/// <param name = "value">
					/// Target duty in range [0;1].
					/// </param>
					public sealed partial class setDuty : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"setDuty").AddClasses("Method");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{IPwmPin._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {_NameRef}({Parameters.value.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency.HardwareExtensionInterface.IPwmPin.setDuty",null,$"Method of `{Api.Antilatency.HardwareExtensionInterface.IPwmPin._NameRef}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class value : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("float")} {_Name}");
								public static IElement _Name => new Modify($"value").Attribute("title", "parameter value");
								public static IElement NameCode => _Name.Modify().Wrap("code");
							} //scope value
						} //scope Parameters
					} //scope setDuty
					/// <summary>Get actual pwm duty.</summary>
					/// <returns>Pwm duty in range [0;1].</returns>
					public sealed partial class getDuty : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getDuty").AddClasses("Method");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{IPwmPin._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("float")} {_NameRef}()");
						public static Material Material => new Material("Antilatency.HardwareExtensionInterface.IPwmPin.getDuty",null,$"Method of `{Api.Antilatency.HardwareExtensionInterface.IPwmPin._NameRef}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope getDuty
					/// <summary>Get actual pwm frequency.</summary>
					/// <returns>Pwm frequency in hertz.</returns>
					public sealed partial class getFrequency : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getFrequency").AddClasses("Method");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{IPwmPin._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("uint")} {_NameRef}()");
						public static Material Material => new Material("Antilatency.HardwareExtensionInterface.IPwmPin.getFrequency",null,$"Method of `{Api.Antilatency.HardwareExtensionInterface.IPwmPin._NameRef}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope getFrequency
				} //scope Methods
			} //scope IPwmPin
			
			public sealed partial class ICotask : Scope {
				public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"ICotask").AddClasses("Type");
				public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
				public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
				public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
				public static IElement RawDeclarationCode => new Text($"{Interface} {_NameRef} : {Api.Antilatency.DeviceNetwork._NameRef.Modify().ContentReplace($"DeviceNetwork")}.{Api.Antilatency.DeviceNetwork.ICotask._NameRef} {{\n    {Methods.createInputPin.RawDeclarationCode};\n    {Methods.createOutputPin.RawDeclarationCode};\n    {Methods.createAnalogPin.RawDeclarationCode};\n    {Methods.createPulseCounterPin.RawDeclarationCode};\n    {Methods.createPwmPin.RawDeclarationCode};\n    {Methods.run.RawDeclarationCode};\n}}");
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static Material Material => new Material("Antilatency.HardwareExtensionInterface.ICotask",null,$"Interface in `{Api.Antilatency.HardwareExtensionInterface._FullNameRef}`")[CodeBlock];
				public sealed partial class Methods : Scope {
					/// <summary>Create InputPin for reading state of pin.</summary>
					/// <param name = "pin">
					/// Target pin.
					/// </param>
					public sealed partial class createInputPin : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"createInputPin").AddClasses("Method");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{ICotask._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.IInputPin._NameRef} {_NameRef}({Parameters.pin.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency.HardwareExtensionInterface.ICotask.createInputPin",null,$"Method of `{Api.Antilatency.HardwareExtensionInterface.ICotask._NameRef}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class pin : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.Interop._NameRef.Modify().ContentReplace($"Interop")}.{Api.Antilatency.HardwareExtensionInterface.Interop.Pins._NameRef} {_Name}");
								public static IElement _Name => new Modify($"pin").Attribute("title", "parameter pin");
								public static IElement NameCode => _Name.Modify().Wrap("code");
							} //scope pin
						} //scope Parameters
					} //scope createInputPin
					/// <summary>Create OutputPin for controlling state of pin.</summary>
					/// <param name = "pin">
					/// Target pin.
					/// </param>
					/// <param name = "initialState">
					/// Logic level on pin right after init.
					/// </param>
					public sealed partial class createOutputPin : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"createOutputPin").AddClasses("Method");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{ICotask._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.IOutputPin._NameRef} {_NameRef}({Parameters.pin.RawDeclarationCode}, {Parameters.initialState.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency.HardwareExtensionInterface.ICotask.createOutputPin",null,$"Method of `{Api.Antilatency.HardwareExtensionInterface.ICotask._NameRef}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class pin : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.Interop._NameRef.Modify().ContentReplace($"Interop")}.{Api.Antilatency.HardwareExtensionInterface.Interop.Pins._NameRef} {_Name}");
								public static IElement _Name => new Modify($"pin").Attribute("title", "parameter pin");
								public static IElement NameCode => _Name.Modify().Wrap("code");
							} //scope pin
							public sealed partial class initialState : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.Interop._NameRef.Modify().ContentReplace($"Interop")}.{Api.Antilatency.HardwareExtensionInterface.Interop.PinState._NameRef} {_Name}");
								public static IElement _Name => new Modify($"initialState").Attribute("title", "parameter initialState");
								public static IElement NameCode => _Name.Modify().Wrap("code");
							} //scope initialState
						} //scope Parameters
					} //scope createOutputPin
					/// <summary>Create AnalogPin for reading voltage on pin.</summary>
					/// <param name = "pin">
					/// Target pin.
					/// </param>
					/// <param name = "refreshIntervalMs">
					/// Interval(in ms) of value updating.
					/// </param>
					public sealed partial class createAnalogPin : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"createAnalogPin").AddClasses("Method");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{ICotask._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.IAnalogPin._NameRef} {_NameRef}({Parameters.pin.RawDeclarationCode}, {Parameters.refreshIntervalMs.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency.HardwareExtensionInterface.ICotask.createAnalogPin",null,$"Method of `{Api.Antilatency.HardwareExtensionInterface.ICotask._NameRef}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class pin : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.Interop._NameRef.Modify().ContentReplace($"Interop")}.{Api.Antilatency.HardwareExtensionInterface.Interop.Pins._NameRef} {_Name}");
								public static IElement _Name => new Modify($"pin").Attribute("title", "parameter pin");
								public static IElement NameCode => _Name.Modify().Wrap("code");
							} //scope pin
							public sealed partial class refreshIntervalMs : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("uint")} {_Name}");
								public static IElement _Name => new Modify($"refreshIntervalMs").Attribute("title", "parameter refreshIntervalMs");
								public static IElement NameCode => _Name.Modify().Wrap("code");
							} //scope refreshIntervalMs
						} //scope Parameters
					} //scope createAnalogPin
					/// <summary>Create PulseCounter for counting rising edges on pin.</summary>
					/// <param name = "pin">
					/// Target pin.
					/// </param>
					/// <param name = "refreshIntervalMs">
					/// Interval(in ms) of value updating.
					/// </param>
					public sealed partial class createPulseCounterPin : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"createPulseCounterPin").AddClasses("Method");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{ICotask._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.IPulseCounterPin._NameRef} {_NameRef}({Parameters.pin.RawDeclarationCode}, {Parameters.refreshIntervalMs.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency.HardwareExtensionInterface.ICotask.createPulseCounterPin",null,$"Method of `{Api.Antilatency.HardwareExtensionInterface.ICotask._NameRef}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class pin : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.Interop._NameRef.Modify().ContentReplace($"Interop")}.{Api.Antilatency.HardwareExtensionInterface.Interop.Pins._NameRef} {_Name}");
								public static IElement _Name => new Modify($"pin").Attribute("title", "parameter pin");
								public static IElement NameCode => _Name.Modify().Wrap("code");
							} //scope pin
							public sealed partial class refreshIntervalMs : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("uint")} {_Name}");
								public static IElement _Name => new Modify($"refreshIntervalMs").Attribute("title", "parameter refreshIntervalMs");
								public static IElement NameCode => _Name.Modify().Wrap("code");
							} //scope refreshIntervalMs
						} //scope Parameters
					} //scope createPulseCounterPin
					/// <summary>Create PwmPin for controlling state of pwm pin.</summary>
					/// <param name = "pin">
					/// Target pin.
					/// </param>
					/// <param name = "frequency">
					/// Target frequency in hertz. Should be equal for all pwm pins.
					/// </param>
					/// <param name = "initialDuty">
					/// Pwm duty right after init.
					/// </param>
					public sealed partial class createPwmPin : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"createPwmPin").AddClasses("Method");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{ICotask._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.IPwmPin._NameRef} {_NameRef}({Parameters.pin.RawDeclarationCode}, {Parameters.frequency.RawDeclarationCode}, {Parameters.initialDuty.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency.HardwareExtensionInterface.ICotask.createPwmPin",null,$"Method of `{Api.Antilatency.HardwareExtensionInterface.ICotask._NameRef}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class pin : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.Interop._NameRef.Modify().ContentReplace($"Interop")}.{Api.Antilatency.HardwareExtensionInterface.Interop.Pins._NameRef} {_Name}");
								public static IElement _Name => new Modify($"pin").Attribute("title", "parameter pin");
								public static IElement NameCode => _Name.Modify().Wrap("code");
							} //scope pin
							public sealed partial class frequency : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("uint")} {_Name}");
								public static IElement _Name => new Modify($"frequency").Attribute("title", "parameter frequency");
								public static IElement NameCode => _Name.Modify().Wrap("code");
							} //scope frequency
							public sealed partial class initialDuty : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("float")} {_Name}");
								public static IElement _Name => new Modify($"initialDuty").Attribute("title", "parameter initialDuty");
								public static IElement NameCode => _Name.Modify().Wrap("code");
							} //scope initialDuty
						} //scope Parameters
					} //scope createPwmPin
					/// <summary>Apply config and start processing of pin states. Switch task in Run mode(configuring not possible).</summary>
					public sealed partial class run : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"run").AddClasses("Method");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{ICotask._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {_NameRef}()");
						public static Material Material => new Material("Antilatency.HardwareExtensionInterface.ICotask.run",null,$"Method of `{Api.Antilatency.HardwareExtensionInterface.ICotask._NameRef}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope run
				} //scope Methods
			} //scope ICotask
			
			public sealed partial class ICotaskConstructor : Scope {
				public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"ICotaskConstructor").AddClasses("Type");
				public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
				public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
				public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
				public static IElement RawDeclarationCode => new Text($"{Interface} {_NameRef} : {Api.Antilatency.DeviceNetwork._NameRef.Modify().ContentReplace($"DeviceNetwork")}.{Api.Antilatency.DeviceNetwork.ICotaskConstructor._NameRef} {{\n    {Methods.startTask.RawDeclarationCode};\n}}");
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static Material Material => new Material("Antilatency.HardwareExtensionInterface.ICotaskConstructor",null,$"Interface in `{Api.Antilatency.HardwareExtensionInterface._FullNameRef}`")[CodeBlock];
				public sealed partial class Methods : Scope {
					/// <summary>Start task to get access for metrics.</summary>
					public sealed partial class startTask : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"startTask").AddClasses("Method");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{ICotaskConstructor._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.ICotask._NameRef} {_NameRef}({Parameters.network.RawDeclarationCode}, {Parameters.node.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency.HardwareExtensionInterface.ICotaskConstructor.startTask",null,$"Method of `{Api.Antilatency.HardwareExtensionInterface.ICotaskConstructor._NameRef}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class network : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.DeviceNetwork._NameRef.Modify().ContentReplace($"DeviceNetwork")}.{Api.Antilatency.DeviceNetwork.INetwork._NameRef} {_Name}");
								public static IElement _Name => new Modify($"network").Attribute("title", "parameter network");
								public static IElement NameCode => _Name.Modify().Wrap("code");
							} //scope network
							public sealed partial class node : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.DeviceNetwork._NameRef.Modify().ContentReplace($"DeviceNetwork")}.{Api.Antilatency.DeviceNetwork.NodeHandle._NameRef} {_Name}");
								public static IElement _Name => new Modify($"node").Attribute("title", "parameter node");
								public static IElement NameCode => _Name.Modify().Wrap("code");
							} //scope node
						} //scope Parameters
					} //scope startTask
				} //scope Methods
			} //scope ICotaskConstructor
			
			public sealed partial class ILibrary : Scope {
				public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"ILibrary").AddClasses("Type");
				public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
				public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
				public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
				public static IElement RawDeclarationCode => new Text($"{Interface} {_NameRef} : {Namespace("InterfaceContract")}.{Type("IInterface")} {{\n    {Methods.getVersion.RawDeclarationCode};\n    {Methods.getCotaskConstructor.RawDeclarationCode};\n}}");
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static Material Material => new Material("Antilatency.HardwareExtensionInterface.ILibrary",null,$"Interface in `{Api.Antilatency.HardwareExtensionInterface._FullNameRef}`")[CodeBlock];
				public sealed partial class Methods : Scope {
					/// <summary>Get version of AntilatencyHardwareExtensionInterface library.</summary>
					public sealed partial class getVersion : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getVersion").AddClasses("Method");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{ILibrary._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("string")} {_NameRef}()");
						public static Material Material => new Material("Antilatency.HardwareExtensionInterface.ILibrary.getVersion",null,$"Method of `{Api.Antilatency.HardwareExtensionInterface.ILibrary._NameRef}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope getVersion
					/// <summary>Create AntilatencyHardwareExtensionInterface CotaskConstructor.</summary>
					public sealed partial class getCotaskConstructor : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getCotaskConstructor").AddClasses("Method");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{ILibrary._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.ICotaskConstructor._NameRef} {_NameRef}()");
						public static Material Material => new Material("Antilatency.HardwareExtensionInterface.ILibrary.getCotaskConstructor",null,$"Method of `{Api.Antilatency.HardwareExtensionInterface.ILibrary._NameRef}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope getCotaskConstructor
				} //scope Methods
			} //scope ILibrary
			
			
		} //scope HardwareExtensionInterface
	} //scope Antilatency
} //scope Api
