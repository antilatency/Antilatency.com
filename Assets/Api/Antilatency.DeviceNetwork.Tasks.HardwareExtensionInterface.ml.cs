//Generated by AntilatencyApiGenerator
#pragma warning disable IDE1006 // Do not warn about naming style violations
using Csml;
public sealed partial class Api : Scope {
	public sealed partial class Antilatency : Scope {
		public sealed partial class DeviceNetwork : Scope {
			public sealed partial class Tasks : Scope {
				public sealed partial class HardwareExtensionInterface : Scope {
					public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"HardwareExtensionInterface").AddClasses("Namespace");
					public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
					public static IElement _FullNameRef => new Text($"{Antilatency.DeviceNetwork.Tasks._FullNameRef}.{_NameRef}");
					public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
					public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface",null,$"Namespace in `{Api.Antilatency.DeviceNetwork.Tasks._FullNameRef}`")
						[new Section("Types")
							[new UnorderedList()
								[$"*constant group* {Constants.NameRefCode}"]
								[$"*enum* {Acknowledgment.NameRefCode}"]
								[$"*struct* {ConfigInput.NameRefCode}"]
								[$"*struct* {ConfigOutput.NameRefCode}"]
								[$"*struct* {ConfigAnalog.NameRefCode}"]
								[$"*struct* {ConfigPulseCounter.NameRefCode}"]
								[$"*struct* {ConfigPwm.NameRefCode}"]
								[$"*struct* {PwmDuty.NameRefCode}"]
								[$"*interface* {IHostToDevice.NameRefCode}"]
								[$"*interface* {IDeviceToHost.NameRefCode}"]
							]
						]
						;
					public sealed partial class Constants : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"Constants").AddClasses("Type");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.Constants",null,$"Constants in `{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface._FullNameRef}`")[CodeBlock];
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Fields.TaskID.RawDeclarationCode}");
						public sealed partial class Fields : Scope {
							public sealed partial class TaskID : Scope {
								public static IElement _Name => new Modify($"TaskID").AddClasses("Constant").Attribute("title", "{{92fd8363-c87d-4b70-afc9-a1157ab65b09}}");
								public static IElement NameCode => _Name.Modify().Wrap("code");
								public static System.Guid Value => new System.Guid("92fd8363-c87d-4b70-afc9-a1157ab65b09");
								public static IElement RawDeclarationCode => new Text($"{Keyword("Guid")} {_Name} = {_Value}");
								public static IElement _Value => new Text($"{{92fd8363-c87d-4b70-afc9-a1157ab65b09}}");
							} //scope TaskID
						} //scope Fields
					} //scope Constants
					
					public sealed partial class Acknowledgment : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"Acknowledgment").AddClasses("Type");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.Acknowledgment",null,$"Enum in {Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.FullNameRefCode}")[CodeBlock];
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Enum} {_NameRef} {{\n    {Fields.Ok.RawDeclarationCode},\n    {Fields.Fail.RawDeclarationCode}\n}}");
						public sealed partial class Fields : Scope {
							public sealed partial class Ok : Scope {
								public static IElement RawDeclarationCode => new Text($"{Name}");
								public static IElement Name => new Modify($"Ok").Attribute("title", "enum element Ok");
							} //scope Ok
							public sealed partial class Fail : Scope {
								public static IElement RawDeclarationCode => new Text($"{Name}");
								public static IElement Name => new Modify($"Fail").Attribute("title", "enum element Fail");
							} //scope Fail
						} //scope Fields
					} //scope Acknowledgment
					
					public sealed partial class ConfigInput : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"ConfigInput").AddClasses("Type");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.ConfigInput",null,$"Struct in {Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.FullNameRefCode}")[CodeBlock];
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Struct} {_NameRef} {{\n    {Fields.pin.RawDeclarationCode};\n}}");
						public sealed partial class Fields : Scope {
							public sealed partial class pin : Scope {
								public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.Interop._NameRef.Modify().ContentReplace($"HardwareExtensionInterface.Interop")}.{Api.Antilatency.HardwareExtensionInterface.Interop.Pins._NameRef} {Name}");
								public static IElement Name => new Modify($"pin").Attribute("title", "field pin");
							} //scope pin
						} //scope Fields
					} //scope ConfigInput
					
					public sealed partial class ConfigOutput : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"ConfigOutput").AddClasses("Type");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.ConfigOutput",null,$"Struct in {Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.FullNameRefCode}")[CodeBlock];
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Struct} {_NameRef} {{\n    {Fields.pin.RawDeclarationCode};\n    {Fields.initState.RawDeclarationCode};\n}}");
						public sealed partial class Fields : Scope {
							public sealed partial class pin : Scope {
								public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.Interop._NameRef.Modify().ContentReplace($"HardwareExtensionInterface.Interop")}.{Api.Antilatency.HardwareExtensionInterface.Interop.Pins._NameRef} {Name}");
								public static IElement Name => new Modify($"pin").Attribute("title", "field pin");
							} //scope pin
							public sealed partial class initState : Scope {
								public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.Interop._NameRef.Modify().ContentReplace($"HardwareExtensionInterface.Interop")}.{Api.Antilatency.HardwareExtensionInterface.Interop.PinState._NameRef} {Name}");
								public static IElement Name => new Modify($"initState").Attribute("title", "field initState");
							} //scope initState
						} //scope Fields
					} //scope ConfigOutput
					
					public sealed partial class ConfigAnalog : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"ConfigAnalog").AddClasses("Type");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.ConfigAnalog",null,$"Struct in {Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.FullNameRefCode}")[CodeBlock];
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Struct} {_NameRef} {{\n    {Fields.pin.RawDeclarationCode};\n    {Fields.refreshInterval.RawDeclarationCode};\n}}");
						public sealed partial class Fields : Scope {
							public sealed partial class pin : Scope {
								public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.Interop._NameRef.Modify().ContentReplace($"HardwareExtensionInterface.Interop")}.{Api.Antilatency.HardwareExtensionInterface.Interop.Pins._NameRef} {Name}");
								public static IElement Name => new Modify($"pin").Attribute("title", "field pin");
							} //scope pin
							public sealed partial class refreshInterval : Scope {
								public static IElement RawDeclarationCode => new Text($"{Keyword("uint")} {Name}");
								public static IElement Name => new Modify($"refreshInterval").Attribute("title", "field refreshInterval");
							} //scope refreshInterval
						} //scope Fields
					} //scope ConfigAnalog
					
					public sealed partial class ConfigPulseCounter : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"ConfigPulseCounter").AddClasses("Type");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.ConfigPulseCounter",null,$"Struct in {Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.FullNameRefCode}")[CodeBlock];
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Struct} {_NameRef} {{\n    {Fields.pin.RawDeclarationCode};\n    {Fields.refreshInterval.RawDeclarationCode};\n}}");
						public sealed partial class Fields : Scope {
							public sealed partial class pin : Scope {
								public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.Interop._NameRef.Modify().ContentReplace($"HardwareExtensionInterface.Interop")}.{Api.Antilatency.HardwareExtensionInterface.Interop.Pins._NameRef} {Name}");
								public static IElement Name => new Modify($"pin").Attribute("title", "field pin");
							} //scope pin
							public sealed partial class refreshInterval : Scope {
								public static IElement RawDeclarationCode => new Text($"{Keyword("uint")} {Name}");
								public static IElement Name => new Modify($"refreshInterval").Attribute("title", "field refreshInterval");
							} //scope refreshInterval
						} //scope Fields
					} //scope ConfigPulseCounter
					
					public sealed partial class ConfigPwm : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"ConfigPwm").AddClasses("Type");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.ConfigPwm",null,$"Struct in {Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.FullNameRefCode}")[CodeBlock];
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Struct} {_NameRef} {{\n    {Fields.pin.RawDeclarationCode};\n    {Fields.topValue.RawDeclarationCode};\n    {Fields.dutyValue.RawDeclarationCode};\n}}");
						public sealed partial class Fields : Scope {
							public sealed partial class pin : Scope {
								public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.Interop._NameRef.Modify().ContentReplace($"HardwareExtensionInterface.Interop")}.{Api.Antilatency.HardwareExtensionInterface.Interop.Pins._NameRef} {Name}");
								public static IElement Name => new Modify($"pin").Attribute("title", "field pin");
							} //scope pin
							public sealed partial class topValue : Scope {
								public static IElement RawDeclarationCode => new Text($"{Keyword("ushort")} {Name}");
								public static IElement Name => new Modify($"topValue").Attribute("title", "field topValue");
							} //scope topValue
							public sealed partial class dutyValue : Scope {
								public static IElement RawDeclarationCode => new Text($"{Keyword("ushort")} {Name}");
								public static IElement Name => new Modify($"dutyValue").Attribute("title", "field dutyValue");
							} //scope dutyValue
						} //scope Fields
					} //scope ConfigPwm
					
					public sealed partial class PwmDuty : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"PwmDuty").AddClasses("Type");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.PwmDuty",null,$"Struct in {Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.FullNameRefCode}")[CodeBlock];
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Struct} {_NameRef} {{\n    {Fields.pin.RawDeclarationCode};\n    {Fields.dutyValue.RawDeclarationCode};\n}}");
						public sealed partial class Fields : Scope {
							public sealed partial class pin : Scope {
								public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.HardwareExtensionInterface.Interop._NameRef.Modify().ContentReplace($"HardwareExtensionInterface.Interop")}.{Api.Antilatency.HardwareExtensionInterface.Interop.Pins._NameRef} {Name}");
								public static IElement Name => new Modify($"pin").Attribute("title", "field pin");
							} //scope pin
							public sealed partial class dutyValue : Scope {
								public static IElement RawDeclarationCode => new Text($"{Keyword("ushort")} {Name}");
								public static IElement Name => new Modify($"dutyValue").Attribute("title", "field dutyValue");
							} //scope dutyValue
						} //scope Fields
					} //scope PwmDuty
					
					public sealed partial class IHostToDevice : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"IHostToDevice").AddClasses("Type");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement RawDeclarationCode => new Text($"{Interface} {_NameRef} : {Namespace("InterfaceContract")}.{Type("IInterface")} {{\n    {Methods.configureInput.RawDeclarationCode};\n    {Methods.configureOutput.RawDeclarationCode};\n    {Methods.configureAnalog.RawDeclarationCode};\n    {Methods.configurePulseCounter.RawDeclarationCode};\n    {Methods.configurePwm.RawDeclarationCode};\n    {Methods.setState.RawDeclarationCode};\n    {Methods.setPwmDuty.RawDeclarationCode};\n    {Methods.start.RawDeclarationCode};\n}}");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IHostToDevice",null,$"Interface in `{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface._FullNameRef}`")[CodeBlock];
						public sealed partial class Methods : Scope {
							public sealed partial class configureInput : Scope {
								public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"configureInput").AddClasses("Method");
								public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
								public static IElement _FullNameRef => new Text($"{IHostToDevice._FullNameRef}.{_NameRef}");
								public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {_NameRef}({Parameters.config.RawDeclarationCode})");
								public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IHostToDevice.configureInput",null,$"Method of `{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IHostToDevice._NameRef}`\n`{RawDeclarationCode}`")
									[new Section("Parameters")]
									;
								public sealed partial class Parameters : Scope {
									public sealed partial class config : Scope {
										public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
										public static IElement CodeInline => CodeInline(RawDeclarationCode);
										public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.ConfigInput._NameRef} {_Name}");
										public static IElement _Name => new Modify($"config").Attribute("title", "parameter config");
										public static IElement NameCode => _Name.Modify().Wrap("code");
									} //scope config
								} //scope Parameters
							} //scope configureInput
							public sealed partial class configureOutput : Scope {
								public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"configureOutput").AddClasses("Method");
								public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
								public static IElement _FullNameRef => new Text($"{IHostToDevice._FullNameRef}.{_NameRef}");
								public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {_NameRef}({Parameters.config.RawDeclarationCode})");
								public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IHostToDevice.configureOutput",null,$"Method of `{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IHostToDevice._NameRef}`\n`{RawDeclarationCode}`")
									[new Section("Parameters")]
									;
								public sealed partial class Parameters : Scope {
									public sealed partial class config : Scope {
										public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
										public static IElement CodeInline => CodeInline(RawDeclarationCode);
										public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.ConfigOutput._NameRef} {_Name}");
										public static IElement _Name => new Modify($"config").Attribute("title", "parameter config");
										public static IElement NameCode => _Name.Modify().Wrap("code");
									} //scope config
								} //scope Parameters
							} //scope configureOutput
							public sealed partial class configureAnalog : Scope {
								public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"configureAnalog").AddClasses("Method");
								public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
								public static IElement _FullNameRef => new Text($"{IHostToDevice._FullNameRef}.{_NameRef}");
								public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {_NameRef}({Parameters.config.RawDeclarationCode})");
								public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IHostToDevice.configureAnalog",null,$"Method of `{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IHostToDevice._NameRef}`\n`{RawDeclarationCode}`")
									[new Section("Parameters")]
									;
								public sealed partial class Parameters : Scope {
									public sealed partial class config : Scope {
										public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
										public static IElement CodeInline => CodeInline(RawDeclarationCode);
										public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.ConfigAnalog._NameRef} {_Name}");
										public static IElement _Name => new Modify($"config").Attribute("title", "parameter config");
										public static IElement NameCode => _Name.Modify().Wrap("code");
									} //scope config
								} //scope Parameters
							} //scope configureAnalog
							public sealed partial class configurePulseCounter : Scope {
								public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"configurePulseCounter").AddClasses("Method");
								public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
								public static IElement _FullNameRef => new Text($"{IHostToDevice._FullNameRef}.{_NameRef}");
								public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {_NameRef}({Parameters.config.RawDeclarationCode})");
								public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IHostToDevice.configurePulseCounter",null,$"Method of `{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IHostToDevice._NameRef}`\n`{RawDeclarationCode}`")
									[new Section("Parameters")]
									;
								public sealed partial class Parameters : Scope {
									public sealed partial class config : Scope {
										public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
										public static IElement CodeInline => CodeInline(RawDeclarationCode);
										public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.ConfigPulseCounter._NameRef} {_Name}");
										public static IElement _Name => new Modify($"config").Attribute("title", "parameter config");
										public static IElement NameCode => _Name.Modify().Wrap("code");
									} //scope config
								} //scope Parameters
							} //scope configurePulseCounter
							public sealed partial class configurePwm : Scope {
								public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"configurePwm").AddClasses("Method");
								public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
								public static IElement _FullNameRef => new Text($"{IHostToDevice._FullNameRef}.{_NameRef}");
								public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {_NameRef}({Parameters.config.RawDeclarationCode})");
								public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IHostToDevice.configurePwm",null,$"Method of `{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IHostToDevice._NameRef}`\n`{RawDeclarationCode}`")
									[new Section("Parameters")]
									;
								public sealed partial class Parameters : Scope {
									public sealed partial class config : Scope {
										public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
										public static IElement CodeInline => CodeInline(RawDeclarationCode);
										public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.ConfigPwm._NameRef} {_Name}");
										public static IElement _Name => new Modify($"config").Attribute("title", "parameter config");
										public static IElement NameCode => _Name.Modify().Wrap("code");
									} //scope config
								} //scope Parameters
							} //scope configurePwm
							public sealed partial class setState : Scope {
								public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"setState").AddClasses("Method");
								public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
								public static IElement _FullNameRef => new Text($"{IHostToDevice._FullNameRef}.{_NameRef}");
								public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {_NameRef}({Parameters.pinAndValue.RawDeclarationCode})");
								public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IHostToDevice.setState",null,$"Method of `{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IHostToDevice._NameRef}`\n`{RawDeclarationCode}`")
									[new Section("Parameters")]
									;
								public sealed partial class Parameters : Scope {
									public sealed partial class pinAndValue : Scope {
										public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
										public static IElement CodeInline => CodeInline(RawDeclarationCode);
										public static IElement RawDeclarationCode => new Text($"{Keyword("byte")} {_Name}");
										public static IElement _Name => new Modify($"pinAndValue").Attribute("title", "parameter pinAndValue");
										public static IElement NameCode => _Name.Modify().Wrap("code");
									} //scope pinAndValue
								} //scope Parameters
							} //scope setState
							public sealed partial class setPwmDuty : Scope {
								public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"setPwmDuty").AddClasses("Method");
								public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
								public static IElement _FullNameRef => new Text($"{IHostToDevice._FullNameRef}.{_NameRef}");
								public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {_NameRef}({Parameters.value.RawDeclarationCode})");
								public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IHostToDevice.setPwmDuty",null,$"Method of `{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IHostToDevice._NameRef}`\n`{RawDeclarationCode}`")
									[new Section("Parameters")]
									;
								public sealed partial class Parameters : Scope {
									public sealed partial class value : Scope {
										public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
										public static IElement CodeInline => CodeInline(RawDeclarationCode);
										public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.PwmDuty._NameRef} {_Name}");
										public static IElement _Name => new Modify($"value").Attribute("title", "parameter value");
										public static IElement NameCode => _Name.Modify().Wrap("code");
									} //scope value
								} //scope Parameters
							} //scope setPwmDuty
							public sealed partial class start : Scope {
								public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"start").AddClasses("Method");
								public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
								public static IElement _FullNameRef => new Text($"{IHostToDevice._FullNameRef}.{_NameRef}");
								public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {_NameRef}()");
								public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IHostToDevice.start",null,$"Method of `{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IHostToDevice._NameRef}`\n`{RawDeclarationCode}`")
									[new Section("Parameters")]
									;
								public sealed partial class Parameters : Scope {
								} //scope Parameters
							} //scope start
						} //scope Methods
					} //scope IHostToDevice
					
					public sealed partial class IDeviceToHost : Scope {
						public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"IDeviceToHost").AddClasses("Type");
						public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
						public static IElement _FullNameRef => new Text($"{HardwareExtensionInterface._FullNameRef}.{_NameRef}");
						public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
						public static IElement RawDeclarationCode => new Text($"{Interface} {_NameRef} : {Namespace("InterfaceContract")}.{Type("IInterface")} {{\n    {Methods.acknowledgment.RawDeclarationCode};\n    {Methods.pulseCounter0.RawDeclarationCode};\n    {Methods.pulseCounter1.RawDeclarationCode};\n    {Methods.analog0.RawDeclarationCode};\n    {Methods.analog1.RawDeclarationCode};\n    {Methods.inputState.RawDeclarationCode};\n}}");
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IDeviceToHost",null,$"Interface in `{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface._FullNameRef}`")[CodeBlock];
						public sealed partial class Methods : Scope {
							public sealed partial class acknowledgment : Scope {
								public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"acknowledgment").AddClasses("Method");
								public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
								public static IElement _FullNameRef => new Text($"{IDeviceToHost._FullNameRef}.{_NameRef}");
								public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {_NameRef}({Parameters.value.RawDeclarationCode})");
								public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IDeviceToHost.acknowledgment",null,$"Method of `{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IDeviceToHost._NameRef}`\n`{RawDeclarationCode}`")
									[new Section("Parameters")]
									;
								public sealed partial class Parameters : Scope {
									public sealed partial class value : Scope {
										public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
										public static IElement CodeInline => CodeInline(RawDeclarationCode);
										public static IElement RawDeclarationCode => new Text($"{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.Acknowledgment._NameRef} {_Name}");
										public static IElement _Name => new Modify($"value").Attribute("title", "parameter value");
										public static IElement NameCode => _Name.Modify().Wrap("code");
									} //scope value
								} //scope Parameters
							} //scope acknowledgment
							public sealed partial class pulseCounter0 : Scope {
								public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"pulseCounter0").AddClasses("Method");
								public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
								public static IElement _FullNameRef => new Text($"{IDeviceToHost._FullNameRef}.{_NameRef}");
								public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {_NameRef}({Parameters.value.RawDeclarationCode})");
								public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IDeviceToHost.pulseCounter0",null,$"Method of `{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IDeviceToHost._NameRef}`\n`{RawDeclarationCode}`")
									[new Section("Parameters")]
									;
								public sealed partial class Parameters : Scope {
									public sealed partial class value : Scope {
										public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
										public static IElement CodeInline => CodeInline(RawDeclarationCode);
										public static IElement RawDeclarationCode => new Text($"{Keyword("ushort")} {_Name}");
										public static IElement _Name => new Modify($"value").Attribute("title", "parameter value");
										public static IElement NameCode => _Name.Modify().Wrap("code");
									} //scope value
								} //scope Parameters
							} //scope pulseCounter0
							public sealed partial class pulseCounter1 : Scope {
								public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"pulseCounter1").AddClasses("Method");
								public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
								public static IElement _FullNameRef => new Text($"{IDeviceToHost._FullNameRef}.{_NameRef}");
								public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {_NameRef}({Parameters.value.RawDeclarationCode})");
								public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IDeviceToHost.pulseCounter1",null,$"Method of `{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IDeviceToHost._NameRef}`\n`{RawDeclarationCode}`")
									[new Section("Parameters")]
									;
								public sealed partial class Parameters : Scope {
									public sealed partial class value : Scope {
										public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
										public static IElement CodeInline => CodeInline(RawDeclarationCode);
										public static IElement RawDeclarationCode => new Text($"{Keyword("ushort")} {_Name}");
										public static IElement _Name => new Modify($"value").Attribute("title", "parameter value");
										public static IElement NameCode => _Name.Modify().Wrap("code");
									} //scope value
								} //scope Parameters
							} //scope pulseCounter1
							public sealed partial class analog0 : Scope {
								public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"analog0").AddClasses("Method");
								public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
								public static IElement _FullNameRef => new Text($"{IDeviceToHost._FullNameRef}.{_NameRef}");
								public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {_NameRef}({Parameters.value.RawDeclarationCode})");
								public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IDeviceToHost.analog0",null,$"Method of `{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IDeviceToHost._NameRef}`\n`{RawDeclarationCode}`")
									[new Section("Parameters")]
									;
								public sealed partial class Parameters : Scope {
									public sealed partial class value : Scope {
										public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
										public static IElement CodeInline => CodeInline(RawDeclarationCode);
										public static IElement RawDeclarationCode => new Text($"{Keyword("ushort")} {_Name}");
										public static IElement _Name => new Modify($"value").Attribute("title", "parameter value");
										public static IElement NameCode => _Name.Modify().Wrap("code");
									} //scope value
								} //scope Parameters
							} //scope analog0
							public sealed partial class analog1 : Scope {
								public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"analog1").AddClasses("Method");
								public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
								public static IElement _FullNameRef => new Text($"{IDeviceToHost._FullNameRef}.{_NameRef}");
								public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {_NameRef}({Parameters.value.RawDeclarationCode})");
								public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IDeviceToHost.analog1",null,$"Method of `{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IDeviceToHost._NameRef}`\n`{RawDeclarationCode}`")
									[new Section("Parameters")]
									;
								public sealed partial class Parameters : Scope {
									public sealed partial class value : Scope {
										public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
										public static IElement CodeInline => CodeInline(RawDeclarationCode);
										public static IElement RawDeclarationCode => new Text($"{Keyword("ushort")} {_Name}");
										public static IElement _Name => new Modify($"value").Attribute("title", "parameter value");
										public static IElement NameCode => _Name.Modify().Wrap("code");
									} //scope value
								} //scope Parameters
							} //scope analog1
							public sealed partial class inputState : Scope {
								public static IElement _NameRef => new Deferred(()=>Material).Modify().ContentReplace($"inputState").AddClasses("Method");
								public static IElement NameRefCode => _NameRef.Modify().Wrap("code");
								public static IElement _FullNameRef => new Text($"{IDeviceToHost._FullNameRef}.{_NameRef}");
								public static IElement FullNameRefCode => _FullNameRef.Modify().Wrap("code");
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {_NameRef}({Parameters.pinAndValue.RawDeclarationCode})");
								public static Material Material => new Material("Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IDeviceToHost.inputState",null,$"Method of `{Api.Antilatency.DeviceNetwork.Tasks.HardwareExtensionInterface.IDeviceToHost._NameRef}`\n`{RawDeclarationCode}`")
									[new Section("Parameters")]
									;
								public sealed partial class Parameters : Scope {
									public sealed partial class pinAndValue : Scope {
										public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
										public static IElement CodeInline => CodeInline(RawDeclarationCode);
										public static IElement RawDeclarationCode => new Text($"{Keyword("byte")} {_Name}");
										public static IElement _Name => new Modify($"pinAndValue").Attribute("title", "parameter pinAndValue");
										public static IElement NameCode => _Name.Modify().Wrap("code");
									} //scope pinAndValue
								} //scope Parameters
							} //scope inputState
						} //scope Methods
					} //scope IDeviceToHost
					
					
				} //scope HardwareExtensionInterface
			} //scope Tasks
		} //scope DeviceNetwork
	} //scope Antilatency
} //scope Api
